var _ = require('lodash'),
    expect = require('expect.js'),

    Species = require('../core/lib/species'),

    TestHelper = require('./helper')._global,
    testData = TestHelper.getTestDBImages(),
    testSpeciesImage = testData[0],
    testSpecies = new Species(testSpeciesImage.getSpeciesName(), testSpeciesImage.getSpeciesProps());

describe("Animal", function () {
    var Animal = require('../core/lib/animal');

    describe("toObject()", function () {

        it("returns an object of values", function () {
            var testAnimalProps = {
                    sex: 'female',
                    petName: 'test'
                },
                testAnimal = new Animal(testSpecies, testAnimalProps);
            var testAnimalObject = testAnimal.toObject({isV1Format: false});
            expect(testAnimalObject).not.to.be(undefined, 'result should be defined');
            expect(_.isPlainObject(testAnimalObject)).to.be(true, 'result should be a plain object');
            _.forEach(testAnimalProps, function (propValue, propName) {
                expect(testAnimalObject[propName]).to.equal(propValue);
            });
        })
    });

    describe("getValue()", function () {
        it("returns the value of a prop per name", function () {
            var testAnimalProps = {
                    sex: 'male',
                    petName: 'valTester'
                },
                testAnimal = new Animal(testSpecies, testAnimalProps);

            _.forEach(testAnimalProps, function (propValue, propName) {
                expect(testAnimal.getValue(propName)).to.equal(propValue);
            });

        })
    });

    describe("toQuery()", function () {

        it("returns a mongodb friendly object", function () {
            var testAnimalProps = {
                    sex: 'female',
                    petName: 'test'
                },
                testAnimal = new Animal(testSpecies, testAnimalProps),
                testAnimalQuery = testAnimal.toQuery();

            expect(_.isPlainObject(testAnimalQuery)).to.be(true, 'query should be a plain object');

            // $all and $elemMatch are mongo helper properties
            testAnimalQuery.props.$all.forEach(function (propQuery) {
                var queryFieldName = propQuery.$elemMatch.key,
                    queryFieldValue = propQuery.$elemMatch.val;

                if (queryFieldName == 'species') return; // ignore auto generated species prop
                if (!testAnimalProps[queryFieldName]) throw new Error("invalid prop '" + queryFieldName + "' generated by query");
                expect(queryFieldValue).to.be.a(RegExp, null, queryFieldName + " should be a regex");
            });
        })
    });
});
